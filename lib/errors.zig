// zig fmt: off

const std = @import("std");

pub const SchemaError = error{
    RegistryUnreachable,
    RegistryAngry,
    UnexpectedSchemaId,
};

pub const ResponseError = error{
    Fail,                                      // = -196
    NoOffset,                                  // = -161
    Destroy,                                   //
    PartitionEOF,                              // = -191,
    Unknown,                                   // = -1,
    NoError,                                   // = 0,
    OffsetOutOfRange,                          // = 1,
    InvalidMsg,                                // = 2,
    UnknownTopicOrPart,                        // = 3,
    InvalidMsgSize,                            // = 4,
    LeaderNotAvailable,                        // = 5,
    NotLeaderOrFollower,                       //
    NotLeaderForPartition,                     // = 6,
    RequestTimedOut,                           // = 7,
    BrokerNotAvailable,                        // = 8,
    ReplicaNotAvailable,                       // = 9,
    MsgSizeTooLarge,                           // = 10,
    StaleCtrlEpoch,                            // = 11,
    OffsetMetadataTooLarge,                    // = 12,
    NetworkException,                          // = 13,
    CoordinatorLoadInProgress,                 // = 14,
    GroupLoadInProgress,                       //
    CoordinatorNotAvailable,                   // = 15,
    GroupCoordinatorNotAvailable,              //
    NotCoordinator,                            // = 16,
    NotCoordinatorForGroup,                    //
    TopicException,                            // = 17,
    RecordListTooLarge,                        // = 18,
    NotEnoughReplicas,                         // = 19,
    NotEnoughReplicasAfterAppend,              // = 20,
    InvalidRequiredAcks,                       // = 21,
    IllegalGeneration,                         // = 22,
    InconsistentGroupProtocol,                 // = 23,
    InvalidGroupId,                            // = 24,
    UnknownMemberId,                           // = 25,
    InvalidSessionTimeout,                     // = 26,
    RebalanceInProgress,                       // = 27,
    InvalidCommitOffsetSize,                   // = 28,
    TopicAuthorizationFailed,                  // = 29,
    GroupAuthorizationFailed,                  // = 30,
    ClusterAuthorizationFailed,                // = 31,
    InvalidTimestamp,                          // = 32,
    UnsupportedSaslMechanism,                  // = 33,
    IllegalSaslState,                          // = 34,
    UnsupportedVersion,                        // = 35,
    TopicAlreadyExists,                        // = 36,
    InvalidPartitions,                         // = 37,
    InvalidReplicationFactor,                  // = 38,
    InvalidReplicaAssignment,                  // = 39,
    InvalidConfig,                             // = 40,
    NotController,                             // = 41,
    InvalidRequest,                            // = 42,
    UnsupportedForMessageFormat,               // = 43,
    PolicyViolation,                           // = 44,
    OutOfOrderSequenceNumber,                  // = 45,
    DuplicateSequenceNumber,                   // = 46,
    InvalidProducerEpoch,                      // = 47,
    InvalidTxnState,                           // = 48,
    InvalidProducerIdMapping,                  // = 49,
    InvalidTransactionTimeout,                 // = 50,
    ConcurrentTransactions,                    // = 51,
    TransactionCoordinatorFenced,              // = 52,
    TransactionalIdAuthorizationFailed,        // = 53,
    SecurityDisabled,                          // = 54,
    OperationNotAttempted,                     // = 55,
    KafkaStorageError,                         // = 56,
    LogDirNotFound,                            // = 57,
    SaslAuthenticationFailed,                  // = 58,
    UnknownProducerId,                         // = 59,
    ReassignmentInProgress,                    // = 60,
    DelegationTokenAuthDisabled,               // = 61,
    DelegationTokenNotFound,                   // = 62,
    DelegationTokenOwnerMismatch,              // = 63,
    DelegationTokenRequestNotAllowed,          // = 64,
    DelegationTokenAuthorizationFailed,        // = 65,
    DelegationTokenExpired,                    // = 66,
    InvalidPrincipalType,                      // = 67,
    NonEmptyGroup,                             // = 68,
    GroupIdNotFound,                           // = 69,
    FetchSessionIdNotFound,                    // = 70,
    InvalidFetchSessionEpoch,                  // = 71,
    ListenerNotFound,                          // = 72,
    TopicDeletionDisabled,                     // = 73,
    FencedLeaderEpoch,                         // = 74,
    UnknownLeaderEpoch,                        // = 75,
    UnsupportedCompressionType,                // = 76,
    StaleBrokerEpoch,                          // = 77,
    OffsetNotAvailable,                        // = 78,
    MemberIdRequired,                          // = 79,
    PreferredLeaderNotAvailable,               // = 80,
    GroupMaxSizeReached,                       // = 81,
    FencedInstanceId,                          // = 82,
    EligibleLeadersNotAvailable,               // = 83,
    ElectionNotNeeded,                         // = 84,
    NoReassignmentInProgress,                  // = 85,
    GroupSubscribedToTopic,                    // = 86,
    InvalidRecord,                             // = 87,
    UnstableOffsetCommit,                      // = 88,
    ThrottlingQuotaExceeded,                   // = 89,
    ProducerFenced,                            // = 90,
    ResourceNotFound,                          // = 91,
    DuplicateResource,                         // = 92,
    UnacceptableCredential,                    // = 93,
    InconsistentVoterSet,                      // = 94,
    InvalidUpdateVersion,                      // = 95,
    FeatureUpdateFailed,                       // = 96,
    PrincipalDeserializationFailure,           // = 97,
    UnknownTopicId,                            // = 100,
    FencedMemberEpoch,                         // = 110,
    UnreleasedInstanceId,                      // = 111,
    UnsupportedAssignor,                       // = 112,
    StaleMemberEpoch,                          // = 113,
    UnknownSubscriptionId,                     // = 117,
    TelemetryTooLarge,                         // = 118,
    EndAll,
};

pub fn from(int: c_int) anyerror {
    return switch (int) {
        0    => ResponseError.NoError,
        -196 => ResponseError.Fail,
        -168 => ResponseError.NoOffset,
        -1   => ResponseError.Unknown,
        1    => ResponseError.OffsetOutOfRange,
        2    => ResponseError.InvalidMsg,
        3    => ResponseError.UnknownTopicOrPart,
        4    => ResponseError.InvalidMsgSize,
        5    => ResponseError.LeaderNotAvailable,
        6    => ResponseError.NotLeaderOrFollower,       // NotLeaderForPartition
        7    => ResponseError.RequestTimedOut,
        8    => ResponseError.BrokerNotAvailable,
        9    => ResponseError.ReplicaNotAvailable,
        10   => ResponseError.MsgSizeTooLarge,
        11   => ResponseError.StaleCtrlEpoch,
        12   => ResponseError.OffsetMetadataTooLarge,
        13   => ResponseError.NetworkException,
        14   => ResponseError.CoordinatorLoadInProgress, // GroupLoadInProgress
        15   => ResponseError.CoordinatorNotAvailable,   // GroupCoordinatorNotAvailable
        16   => ResponseError.NotCoordinator,            // NotCoordinatorForGroup
        17   => ResponseError.TopicException,
        18   => ResponseError.RecordListTooLarge,
        19   => ResponseError.NotEnoughReplicas,
        20   => ResponseError.NotEnoughReplicasAfterAppend,
        21   => ResponseError.InvalidRequiredAcks,
        22   => ResponseError.IllegalGeneration,
        23   => ResponseError.InconsistentGroupProtocol,
        24   => ResponseError.InvalidGroupId,
        25   => ResponseError.UnknownMemberId,
        26   => ResponseError.InvalidSessionTimeout,
        27   => ResponseError.RebalanceInProgress,
        28   => ResponseError.InvalidCommitOffsetSize,
        29   => ResponseError.TopicAuthorizationFailed,
        30   => ResponseError.GroupAuthorizationFailed,
        31   => ResponseError.ClusterAuthorizationFailed,
        32   => ResponseError.InvalidTimestamp,
        33   => ResponseError.UnsupportedSaslMechanism,
        34   => ResponseError.IllegalSaslState,
        35   => ResponseError.UnsupportedVersion,
        36   => ResponseError.TopicAlreadyExists,
        37   => ResponseError.InvalidPartitions,
        38   => ResponseError.InvalidReplicationFactor,
        39   => ResponseError.InvalidReplicaAssignment,
        40   => ResponseError.InvalidConfig,
        41   => ResponseError.NotController,
        42   => ResponseError.InvalidRequest,
        43   => ResponseError.UnsupportedForMessageFormat,
        44   => ResponseError.PolicyViolation,
        45   => ResponseError.OutOfOrderSequenceNumber,
        46   => ResponseError.DuplicateSequenceNumber,
        47   => ResponseError.InvalidProducerEpoch,
        48   => ResponseError.InvalidTxnState,
        49   => ResponseError.InvalidProducerIdMapping,
        50   => ResponseError.InvalidTransactionTimeout,
        51   => ResponseError.ConcurrentTransactions,
        52   => ResponseError.TransactionCoordinatorFenced,
        53   => ResponseError.TransactionalIdAuthorizationFailed,
        54   => ResponseError.SecurityDisabled,
        55   => ResponseError.OperationNotAttempted,
        56   => ResponseError.KafkaStorageError,
        57   => ResponseError.LogDirNotFound,
        58   => ResponseError.SaslAuthenticationFailed,
        59   => ResponseError.UnknownProducerId,
        60   => ResponseError.ReassignmentInProgress,
        61   => ResponseError.DelegationTokenAuthDisabled,
        62   => ResponseError.DelegationTokenNotFound,
        63   => ResponseError.DelegationTokenOwnerMismatch,
        64   => ResponseError.DelegationTokenRequestNotAllowed,
        65   => ResponseError.DelegationTokenAuthorizationFailed,
        66   => ResponseError.DelegationTokenExpired,
        67   => ResponseError.InvalidPrincipalType,
        68   => ResponseError.NonEmptyGroup,
        69   => ResponseError.GroupIdNotFound,
        70   => ResponseError.FetchSessionIdNotFound,
        71   => ResponseError.InvalidFetchSessionEpoch,
        72   => ResponseError.ListenerNotFound,
        73   => ResponseError.TopicDeletionDisabled,
        74   => ResponseError.FencedLeaderEpoch,
        75   => ResponseError.UnknownLeaderEpoch,
        76   => ResponseError.UnsupportedCompressionType,
        77   => ResponseError.StaleBrokerEpoch,
        78   => ResponseError.OffsetNotAvailable,
        79   => ResponseError.MemberIdRequired,
        80   => ResponseError.PreferredLeaderNotAvailable,
        81   => ResponseError.GroupMaxSizeReached,
        82   => ResponseError.FencedInstanceId,
        83   => ResponseError.EligibleLeadersNotAvailable,
        84   => ResponseError.ElectionNotNeeded,
        85   => ResponseError.NoReassignmentInProgress,
        86   => ResponseError.GroupSubscribedToTopic,
        87   => ResponseError.InvalidRecord,
        88   => ResponseError.UnstableOffsetCommit,
        89   => ResponseError.ThrottlingQuotaExceeded,
        90   => ResponseError.ProducerFenced,
        91   => ResponseError.ResourceNotFound,
        92   => ResponseError.DuplicateResource,
        93   => ResponseError.UnacceptableCredential,
        94   => ResponseError.InconsistentVoterSet,
        95   => ResponseError.InvalidUpdateVersion,
        96   => ResponseError.FeatureUpdateFailed,
        97   => ResponseError.PrincipalDeserializationFailure,
        100  => ResponseError.UnknownTopicId,
        110  => ResponseError.FencedMemberEpoch,
        111  => ResponseError.UnreleasedInstanceId,
        112  => ResponseError.UnsupportedAssignor,
        113  => ResponseError.StaleMemberEpoch,
        117  => ResponseError.UnknownSubscriptionId,
        118  => ResponseError.TelemetryTooLarge,
        else => |e| {
            std.log.err("err: {any}", .{e});
            return ResponseError.Unknown;
        },
    };
}

/// Returns void for ignorable errors, otherwise error
///
/// Effectively this creates a passthrough noop in case we hit the ignorable
/// errors.
pub fn ok(int: c_int) !void {
    switch (from(int)) {
        ResponseError.NoError => {},
        ResponseError.NoOffset => {},
        else => |e| return e,
    }
}
